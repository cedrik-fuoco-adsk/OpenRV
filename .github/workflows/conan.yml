name: Conan-OpenRV

on:
  push:

  # This allows manual triggering of the workflow from the web
  workflow_dispatch:
    inputs:
      SKIP_DEPS_CACHE:
        description: 'Skip dependencies caching'
        required: true
        default: 'false'

env:
  SKIP_DEPS_CACHE: 'false'
  QT5_MODULES: 'debug_info qtcharts qtdatavis3d qtlottie qtnetworkauth qtquick3d qtquicktimeline qtscript qtwebengine qtwebglplugin'
  ROCKY_QT5_ARCHIVES: 'icu qt3d qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwayland qtwebchannel qtwebsockets qtwebview qtx11extras qtxmlpatterns'
  MACOX_X86_64_QT5_ARCHIVES: 'd3dcompiler_47 opengl32sw qt3d qtactiveqt qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwebchannel qtwebsockets qtwebview qtwinextras qtxmlpatterns'
  WINDOWS_QT5_ARCHIVES: 'd3dcompiler_47 opengl32sw qt3d qtactiveqt qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwebchannel qtwebsockets qtwebview qtwinextras qtxmlpatterns'

  ROCKY_QT6_MODULES: 'debug_info qt3d qt5compat qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwaylandcompositor qtwebchannel qtwebengine qtwebsockets qtwebview'
  ROCKY_QT6_ARCHIVES: 'icu qtbase qtdeclarative qtsvg qttools qttranslations qtwayland'
  MACOX_X86_64_QT6_MODULES: 'debug_info qt3d qt5compat qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwebchannel qtwebengine qtwebsockets qtwebview'
  MACOX_X86_64_QT6_ARCHIVES: 'qtbase qtdeclarative qtsvg qttools qttranslations'
  WINDOWS_QT6_MODULES: 'debug_info qt3d qt5compat qtactiveqt qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwebchannel qtwebengine qtwebsockets qtwebview'
  WINDOWS_QT6_ARCHIVES: 'd3dcompiler_47 opengl32sw qtbase qtdeclarative qtsvg qttools qttranslations'

jobs:
  rocky-linux:
    if : ${{ github.repository_owner == 'cedrik-fuoco-adsk' }}
    name: 'Rocky Linux ${{ matrix.rocky-version }} ${{ matrix.vfx-platform }}
      <qt=${{ matrix.qt-version }},
       python=${{ matrix.python-version }},
       cmake=${{ matrix.cmake-version }},
       arch=${{ matrix.arch-type }},
       config=${{ matrix.build-type }}>'

    runs-on: ${{ matrix.os }}
    container: 
      image: ${{ matrix.image }}
      volumes:
        - /usr/local/lib/android:/github/home/android
        - /usr/share/dotnet:/github/home/dotnet
        - /opt/ghc:/github/home/ghc
        - /usr/local/.ghcup:/github/home/.ghcup
        - /usr/local/graalvm:/github/home/graalvm
        - /usr/local/share/powershell:/github/home/powershell
        - /usr/local/share/chromium:/github/home/chromium
        - /usr/local/lib/node_modules:/github/home/node_modules
        - /opt/hostedtoolcache/CodeQL:/github/home/CodeQL
        - /usr/local/share/boost:/github/home/boost
    strategy:
      fail-fast: false
      matrix:
        include:
          # CY2024
          - os: "ubuntu-latest"
            rocky-version: "8"
            image: "amd64/rockylinux:8"
            arch-type: "x86_64"
            build-type: "Release"
            qt-version: "6.5.3"
            cmake-version: "3.31.6"
            python-version: "3.11.8"
            vfx-platform: "CY2024"
            extra_repo: "powertools"
            
          - os: "ubuntu-latest"
            rocky-version: "9"
            image: "amd64/rockylinux:9"
            arch-type: "x86_64"
            build-type: "Release"
            qt-version: "6.5.3"
            cmake-version: "3.31.6"
            python-version: "3.11.8"
            vfx-platform: "CY2024"
            extra_repo: "crb"
            
    steps:
      - name: Display disk space
        run: |
          df -h /
          
      - name: Clear up some spaces on disk
        run: |
          # Delete files from host through the volumes
          # It will have some "cannot remove" message, but but atleast 10GB will be cleared.
          rm -rf /github/home/android || true
          rm -rf /github/home/dotnet || true
          rm -rf /github/home/ghc || true
          rm -rf /github/home/.ghcup || true   
          rm -rf /github/home/graalvm || true
          rm -rf /github/home/powershell || true
          rm -rf /github/home/chromium || true
          rm -rf /github/home/node_modules || true
          rm -rf /github/home/CodeQL || true
          rm -rf /github/home/boost || true

      - name: Display disk space
        run: |
          df -h /

      - name: Install system dependencies
        run: |
          dnf install -y epel-release
          dnf config-manager --set-enabled ${{ matrix.extra_repo }} devel
          dnf groupinstall "Development Tools" -y
          dnf install -y alsa-lib-devel autoconf automake avahi-compat-libdns_sd-devel bison bzip2-devel cmake-gui curl-devel flex gcc gcc-c++ git libXcomposite libXi-devel libaio-devel libffi-devel nasm ncurses-devel nss libtool libxkbcommon libXcomposite libXdamage libXrandr libXtst libXcursor mesa-libOSMesa mesa-libOSMesa-devel meson openssl-devel patch pulseaudio-libs pulseaudio-libs-glib2 ocl-icd ocl-icd-devel opencl-headers qt5-qtbase-devel readline-devel sqlite-devel systemd-devel tcl-devel tcsh tk-devel yasm zip zlib-devel wget patchelf pcsc-lite libxkbfile perl-IPC-Cmd perl-Digest-SHA
          dnf install -y libX11-devel libXext-devel libXrender-devel libXrandr-devel libXcursor-devel libXi-devel libXxf86vm-devel libxkbcommon-devel
          dnf install -y xz-devel mesa-libGLU mesa-libGLU-devel
          dnf clean all

      - name: Install other system dependencies
        if: ${{ matrix.rocky-version == '9' }}
        run: |
          dnf install -y perl-CPAN
          cpan FindBin

      - name: Check out repository code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # 4.1.7
        with:
          submodules: recursive

      - name: Add repository as safe directory
        run: |
          git config --global --add safe.directory /__w/OpenRV/OpenRV

      - name: Install pyenv
        run: |
          curl https://pyenv.run | bash

          export PYENV_ROOT="$HOME/.pyenv"
          echo "$PYENV_ROOT/shims" >> $GITHUB_PATH
          echo "$PYENV_ROOT/bin" >> $GITHUB_PATH
          
      - name: Setup pyenv
        run: |
          echo $PATH
          pyenv install ${{ matrix.python-version }}
          pyenv global ${{ matrix.python-version }}

      - name: Display Python installation location
        run: |
          python -c "import sys; print(sys.executable)"

      - name: Install Ninja
        run: |
          wget https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-linux.zip
          unzip ninja-linux.zip -d ./ninja
          echo "$(pwd)/ninja" >> $GITHUB_PATH
          ninja --version
          
      - name: Install CMake
        run: |
          curl -SL -o cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v${{ matrix.cmake-version }}/cmake-${{ matrix.cmake-version }}-Linux-x86_64.tar.gz
          tar -xzf cmake.tar.gz
          ls
          mv cmake-${{ matrix.cmake-version }}-linux-x86_64 ./cmake-${{ matrix.cmake-version }}
          echo "$(pwd)/cmake-${{ matrix.cmake-version }}/bin" >> $GITHUB_PATH

      - name: Prepare Qt folder
        run: |
          mkdir -p "${{ github.workspace }}/deps"

      - name: Install Qt ${{ matrix.qt-version }}
        if: ${{ matrix.vfx-platform == 'CY2023' }}
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ matrix.qt-version }}'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: "${{ github.workspace }}/deps"
          install-deps: 'false'
          modules: ${{ env.QT5_MODULES }}
          archives: ${{ env.ROCKY_QT5_ARCHIVES }}
          # Caching only save 2 minutes. Keep the cache for longer operations.
          cache: false
          setup-python: 'false'
          tools: 'tools_qtcreator'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==3.2.*'
      
      - name: Install Qt ${{ matrix.qt-version }}
        if: ${{ matrix.vfx-platform == 'CY2024' }}
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ matrix.qt-version }}'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: "${{ github.workspace }}/deps"
          install-deps: 'false'
          modules: ${{ env.ROCKY_QT6_MODULES }}
          archives: ${{ env.ROCKY_QT6_ARCHIVES }}
          # Caching only save 2 minutes. Keep the cache for longer operations.
          cache: false
          setup-python: 'false'
          tools: 'tools_qtcreator'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==3.2.*'
        
      - name: Install Python dependencies
        run: |
          python3 -m pip install --user --upgrade -r requirements.txt
          python3 -m pip install --user conan

      - name: Configure OpenRV
        if: ${{ matrix.vfx-platform == 'CY2023' }}
        run: |
          cmake --version
          export QT_HOME=/__w/OpenRV/OpenRV/deps/Qt/${{ matrix.qt-version}}/gcc_64
          cmake -B _build -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DRV_DEPS_QT5_LOCATION=$QT_HOME -DRV_VFX_PLATFORM=${{ matrix.vfx-platform }}

      - name: Set Conan Home Path
        run: echo "CONAN_HOME=$(/github/home/.local/bin/conan config home)" >> $GITHUB_ENV
        
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ${{ env.CONAN_HOME }}
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.py') }}
      
      - name: Configure OpenRV
        if: ${{ matrix.vfx-platform == 'CY2024' }}
        run: |
          /github/home/.local/bin/conan create conan/recipes/ffmpeg/all/conanfile.py --version 6.1.1 --user openrv --build=missing -pr:a ./conan/profiles/x86_64_rocky8
          /github/home/.local/bin/conan create conan/recipes/python/all/conanfile.py --version 3.11.9 --user openrv --build=missing -pr:a ./conan/profiles/x86_64_rocky8 -o python/*:vfx_platform=2024 -o python/*:shared=True -o python/*:optimizations=True -o python/*:with_tkinter=True -o python/*:with_ssl=True
          /github/home/.local/bin/conan export openrvcore-conanfile.py
          
      - name: Build OpenRV dependencies
        run: |
          echo "QT_HOME=/__w/OpenRV/OpenRV/deps/Qt/${{ matrix.qt-version}}/gcc_64" >> $GITHUB_ENV
          /github/home/.local/bin/conan install conanfile.py --build=missing -pr:a ./conan/profiles/x86_64_rocky8

      - name: Cache Conan Dependencies
        id: cache-conan
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CONAN_HOME }}
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.py') }}
          
      - name: Build OpenRV main executable
        run: |
          /github/home/.local/bin/conan build conanfile.py --build=missing -pr:a ./conan/profiles/x86_64_rocky8

      - name: Tests
        run: |
          ctest --test-dir build/Release -C ${{ matrix.build-type }} --extra-verbose

      - name: Free some spaces for the install steps
        run: |
          rm -rf build/Release/RV_DEPS_*
          rm -rf build/Release/_deps

      - name: Install OpenRV
        run: |
          cmake --install build/Release --prefix $(pwd)/_install --config ${{ matrix.build-type }}

  macos:
    if : ${{ github.repository_owner == 'cedrik-fuoco-adsk' }}
    name: '${{ matrix.os }} ${{ matrix.arch-type }} ${{ matrix.vfx-platform }}
      <qt=${{ matrix.qt-version }},
       python=${{ matrix.python-version }},
       arch=${{ matrix.arch-type }},
       config=${{ matrix.build-type }}>'

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # VFX2024
          #- os: "macos-13"
            #arch-type: "x86_64"
            #build-type: "Release"
            #qt-version: "6.5.3"
            #qt-version-short: "6.5"
            #python-version: "3.11"
            #cmake-version: "3.31.6"
            #vfx-platform: "CY2024"
          - os: "macos-14"
            arch-type: "arm64"
            build-type: "Release"
            qt-version: "6.5.3"
            qt-version-short: "6.5"
            python-version: "3.11"
            cmake-version: "3.31.6"
            vfx-platform: "CY2024"

    steps:
      - name: Check if it is a schedule job
        if: github.event_name == 'schedule'
        run: |
          echo "SKIP_DEPS_CACHE='true'" >> $GITHUB_ENV
          
      - name: Display disk space
        run: |
          df -h /
          
      - name: Clear up some spaces on disk
        run: |
          # Remove some unused XCode (Default is XCode 15.4).
          sudo rm -rf /Applications/Xcode_15.3.app
          sudo rm -rf /Applications/Xcode_15.2.app
          sudo rm -rf /Applications/Xcode_15.1.app
          sudo rm -rf /Applications/Xcode_15.0.1.app
          sudo rm -rf /Users/runner/Library/Android

      - name: Display disk space
        run: |
          df -h /

      - name: Check out repository code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # 4.1.7
        with:
          submodules: recursive

      - name: Add repository as safe directory
        run: |
          git config --global --add safe.directory /__w/OpenRV/OpenRV

      - name: Install cmake
        uses: jwlawson/actions-setup-cmake@802fa1a2c4e212495c05bf94dba2704a92a472be # v2
        with:
          cmake-version: "${{ matrix.cmake-version }}"

      - name: Prepare Qt folder
        run: |
          mkdir -p "${{ github.workspace }}/deps"

      - name: Install Qt ${{ matrix.qt-version }}
        if: matrix.arch-type == 'x86_64' && matrix.vfx-platform == 'CY2023'
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ matrix.qt-version }}'
          host: 'mac'
          target: 'desktop'
          arch: 'clang_64'
          dir: "${{ github.workspace }}/deps"
          install-deps: 'false'
          modules: ${{ env.QT5_MODULES }}
          archives: ${{ env.MACOX_X86_64_QT5_ARCHIVES }}
          # Caching only save 2 minutes. Keep the cache for longer operations.
          cache: false
          setup-python: 'false'
          tools: 'tools_qtcreator'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==3.2.*'

      - name: Install Qt ${{ matrix.qt-version }}
        if: matrix.vfx-platform == 'CY2024'
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ matrix.qt-version }}'
          host: 'mac'
          target: 'desktop'
          # clang_64 contains both x86_64 and arm64 for Qt 6.
          arch: 'clang_64' 
          dir: "${{ github.workspace }}/deps"
          install-deps: 'false'
          modules: ${{ env.MACOX_X86_64_QT6_MODULES }}
          archives: ${{ env.MACOX_X86_64_QT6_ARCHIVES }}
          # Caching only save 2 minutes. Keep the cache for longer operations.
          cache: false
          setup-python: true
          tools: 'tools_qtcreator'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==3.2.*'

      - name: Patch Qt ${{ matrix.qt-version }}
        if: matrix.arch-type == 'x86_64' && matrix.vfx-platform == 'CY2023'
        # There is an issue with Clang15 and Qt < 5.15.15.
        run: |
          curl -o file.zip https://codereview.qt-project.org/changes/qt%2Fqtbase~503172/revisions/3/files/mkspecs%2Ffeatures%2Ftoolchain.prf/download
          unzip file.zip
          cp $(unzip -l file.zip | awk 'NR==4 {print $4}') ${{ github.workspace }}/deps/Qt/${{ matrix.qt-version }}/clang_64/mkspecs/features/toolchain.prf

      - name: Activate Python ${{ matrix.python-version }}
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # 5.2.0
        with:
          python-version: '${{ matrix.python-version }}'

      - name: Install Python dependencies
        run: |
          python3 -m pip install --user --upgrade -r requirements.txt
          python3 -m pip install --user conan
  
      - name: Install Homebrew dependencies
        # icu4c is needed for Qt UIC executable / AUTOUIC.
        # Might be to find another way to install icu4c if the icu4c recipe disappear.
        run: |
          retry_count=0
          max_retries=5
          
          until [ $retry_count -ge $max_retries ]; do
            echo "Attempt $((retry_count + 1)) of $max_retries"
            
            if brew install --formula cmake ninja readline sqlite3 xz zlib tcl-tk@8 python-tk autoconf automake libtool python yasm clang-format black meson nasm pkg-config glew && \
               brew install --formula icu4c; then
              echo "Homebrew dependencies installed successfully"
              break
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "Attempt $retry_count failed. Retrying in 5 seconds..."
                sleep 5
              fi
            fi
          done
          
          if [ $retry_count -ge $max_retries ]; then
            echo "Failed to install Homebrew dependencies after $max_retries attempts"
            exit 1
          fi

      - name: Set QT_HOME
        if: matrix.arch-type == 'x86_64' && matrix.vfx-platform == 'CY2023'
        # With aqt, the universal binaries are under clang_64 and not macos folder.
        run: |
          echo "QT_HOME=${{ github.workspace }}/deps/Qt/${{ matrix.qt-version }}/clang_64" >> $GITHUB_ENV
          
      - name: Set QT_HOME
        if: matrix.arch-type == 'arm64' && matrix.vfx-platform == 'CY2023'
        # The path for QT_HOME is diferent for arm64 CY2023 because we have to build it in the CI.
        run: |
          echo "QT_HOME=${{ github.workspace }}/deps" >> $GITHUB_ENV

      - name: Set QT_HOME
        if: matrix.vfx-platform == 'CY2024'
        run: |
          echo "QT_HOME=${{ github.workspace }}/deps/Qt/${{ matrix.qt-version }}/macos" >> $GITHUB_ENV

      - name: Set Conan Home Path
        run: echo "CONAN_HOME=$(/Users/runner/Library/Python/3.11/bin/conan config home)" >> $GITHUB_ENV
        
      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ${{ env.CONAN_HOME }}
          key: ${{ runner.os }}-conan-${{ matrix.vfx-platform }}-${{ matrix.arch-type }}-${{ hashFiles('**/conanfile.py') }}
          
      - name: Configure OpenRV
        if: ${{ matrix.vfx-platform == 'CY2024' }}
        run: |
          /Users/runner/Library/Python/3.11/bin/conan config install ${{ github.workspace }}/conan
          /Users/runner/Library/Python/3.11/bin/conan create conan/recipes/ffmpeg/all/conanfile.py --version 6.1.1 --user openrv --build=missing -pr:a ./conan/profiles/arm64_apple_release
          /Users/runner/Library/Python/3.11/bin/conan create conan/recipes/libatomic_ops/all/conanfile.py --version 7.8.2 --user openrv --build=missing -pr:a ./conan/profiles/arm64_apple_release
          /Users/runner/Library/Python/3.11/bin/conan create conan/recipes/python/all/conanfile.py --version 3.11.9 --user openrv --build=missing -pr:a ./conan/profiles/arm64_apple_release -o python/*:vfx_platform=2024 -o python/*:shared=True -o python/*:optimizations=True -o python/*:with_tkinter=True -o python/*:with_ssl=True
          /Users/runner/Library/Python/3.11/bin/conan export openrvcore-conanfile.py

      - name: Build OpenRV dependencies
        run: |
          /Users/runner/Library/Python/3.11/bin/conan install conanfile.py --build=missing -pr:a ./conan/profiles/arm64_apple_release

      - name: Cache Conan Dependencies
        id: cache-conan
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CONAN_HOME }}
          key: ${{ runner.os }}-conan-${{ matrix.vfx-platform }}-${{ matrix.arch-type }}-${{ hashFiles('**/conanfile.py') }}
          
      - name: Build OpenRV main executable
        run: |
          /Users/runner/Library/Python/3.11/bin/conan build conanfile.py --build=missing -pr:a ./conan/profiles/arm64_apple_release
      
      - name: Tests
        run: |
          ctest --test-dir build/Release -C ${{ matrix.build-type }} --extra-verbose

      - name: Free some spaces for the install steps
        run: |
          rm -rf build/Release/RV_DEPS_*
          rm -rf build/Release/_deps
          
      - name: Install OpenRV
        run: |
          cmake --install build/Release --prefix $(pwd)/_install --config ${{ matrix.build-type }}
          
