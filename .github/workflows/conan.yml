name: Conan-OpenRV

on:
  push:

  # This allows manual triggering of the workflow from the web
  workflow_dispatch:
    inputs:
      SKIP_DEPS_CACHE:
        description: 'Skip dependencies caching'
        required: true
        default: 'false'

env:
  SKIP_DEPS_CACHE: 'false'
  QT5_MODULES: 'debug_info qtcharts qtdatavis3d qtlottie qtnetworkauth qtquick3d qtquicktimeline qtscript qtwebengine qtwebglplugin'
  ROCKY_QT5_ARCHIVES: 'icu qt3d qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwayland qtwebchannel qtwebsockets qtwebview qtx11extras qtxmlpatterns'
  MACOX_X86_64_QT5_ARCHIVES: 'd3dcompiler_47 opengl32sw qt3d qtactiveqt qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwebchannel qtwebsockets qtwebview qtwinextras qtxmlpatterns'
  WINDOWS_QT5_ARCHIVES: 'd3dcompiler_47 opengl32sw qt3d qtactiveqt qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwebchannel qtwebsockets qtwebview qtwinextras qtxmlpatterns'

  ROCKY_QT6_MODULES: 'debug_info qt3d qt5compat qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwaylandcompositor qtwebchannel qtwebengine qtwebsockets qtwebview'
  ROCKY_QT6_ARCHIVES: 'icu qtbase qtdeclarative qtsvg qttools qttranslations qtwayland'
  MACOX_X86_64_QT6_MODULES: 'debug_info qt3d qt5compat qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwebchannel qtwebengine qtwebsockets qtwebview'
  MACOX_X86_64_QT6_ARCHIVES: 'qtbase qtdeclarative qtsvg qttools qttranslations'
  WINDOWS_QT6_MODULES: 'debug_info qt3d qt5compat qtactiveqt qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwebchannel qtwebengine qtwebsockets qtwebview'
  WINDOWS_QT6_ARCHIVES: 'd3dcompiler_47 opengl32sw qtbase qtdeclarative qtsvg qttools qttranslations'

jobs:
  rocky-linux:
    if : ${{ github.repository_owner == 'cedrik-fuoco-adsk' }}
    name: 'Rocky Linux ${{ matrix.rocky-version }} ${{ matrix.vfx-platform }}
      <qt=${{ matrix.qt-version }},
       python=${{ matrix.python-version }},
       cmake=${{ matrix.cmake-version }},
       arch=${{ matrix.arch-type }},
       config=${{ matrix.build-type }}>'

    runs-on: ${{ matrix.os }}
    container: 
      image: ${{ matrix.image }}
      volumes:
        - /usr/local/lib/android:/github/home/android
        - /usr/share/dotnet:/github/home/dotnet
        - /opt/ghc:/github/home/ghc
        - /usr/local/.ghcup:/github/home/.ghcup
        - /usr/local/graalvm:/github/home/graalvm
        - /usr/local/share/powershell:/github/home/powershell
        - /usr/local/share/chromium:/github/home/chromium
        - /usr/local/lib/node_modules:/github/home/node_modules
        - /opt/hostedtoolcache/CodeQL:/github/home/CodeQL
        - /usr/local/share/boost:/github/home/boost
    strategy:
      fail-fast: false
      matrix:
        include:
          # CY2024
          - os: "ubuntu-latest"
            rocky-version: "9"
            image: "amd64/rockylinux:9"
            arch-type: "x86_64"
            build-type: "Release"
            qt-version: "6.5.3"
            cmake-version: "3.31.6"
            python-version: "3.11.8"
            vfx-platform: "CY2024"
            extra_repo: "crb"
            
    steps:
      - name: Display disk space
        run: |
          df -h /
          
      - name: Clear up some spaces on disk
        run: |
          # Delete files from host through the volumes
          # It will have some "cannot remove" message, but but atleast 10GB will be cleared.
          rm -rf /github/home/android || true
          rm -rf /github/home/dotnet || true
          rm -rf /github/home/ghc || true
          rm -rf /github/home/.ghcup || true   
          rm -rf /github/home/graalvm || true
          rm -rf /github/home/powershell || true
          rm -rf /github/home/chromium || true
          rm -rf /github/home/node_modules || true
          rm -rf /github/home/CodeQL || true
          rm -rf /github/home/boost || true

      - name: Display disk space
        run: |
          df -h /

      - name: Install system dependencies
        run: |
          dnf install -y epel-release
          dnf config-manager --set-enabled ${{ matrix.extra_repo }} devel
          dnf groupinstall "Development Tools" -y
          dnf install -y alsa-lib-devel autoconf automake avahi-compat-libdns_sd-devel bison bzip2-devel cmake-gui curl-devel flex gcc gcc-c++ git libXcomposite libXi-devel libaio-devel libffi-devel nasm ncurses-devel nss libtool libxkbcommon libXcomposite libXdamage libXrandr libXtst libXcursor mesa-libOSMesa mesa-libOSMesa-devel meson openssl-devel patch pulseaudio-libs pulseaudio-libs-glib2 ocl-icd ocl-icd-devel opencl-headers qt5-qtbase-devel readline-devel sqlite-devel systemd-devel tcl-devel tcsh tk-devel yasm zip zlib-devel wget patchelf pcsc-lite libxkbfile perl-IPC-Cmd
          dnf install -y libX11-devel libXext-devel libXrender-devel libXrandr-devel libXcursor-devel libXi-devel libXxf86vm-devel libxkbcommon-devel
          dnf install -y xz-devel mesa-libGLU mesa-libGLU-devel
          dnf clean all

      - name: Install other system dependencies
        if: ${{ matrix.rocky-version == '9' }}
        run: |
          dnf install -y perl-CPAN
          cpan FindBin

      - name: Check out repository code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # 4.1.7
        with:
          submodules: recursive

      - name: Add repository as safe directory
        run: |
          git config --global --add safe.directory /__w/OpenRV/OpenRV

      - name: Install pyenv
        run: |
          curl https://pyenv.run | bash

          export PYENV_ROOT="$HOME/.pyenv"
          echo "$PYENV_ROOT/shims" >> $GITHUB_PATH
          echo "$PYENV_ROOT/bin" >> $GITHUB_PATH
          
      - name: Setup pyenv
        run: |
          echo $PATH
          pyenv install ${{ matrix.python-version }}
          pyenv global ${{ matrix.python-version }}

      - name: Display Python installation location
        run: |
          python -c "import sys; print(sys.executable)"

      - name: Install Ninja
        run: |
          wget https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-linux.zip
          unzip ninja-linux.zip -d ./ninja
          echo "$(pwd)/ninja" >> $GITHUB_PATH
          ninja --version
          
      - name: Install CMake
        run: |
          curl -SL -o cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v${{ matrix.cmake-version }}/cmake-${{ matrix.cmake-version }}-Linux-x86_64.tar.gz
          tar -xzf cmake.tar.gz
          ls
          mv cmake-${{ matrix.cmake-version }}-linux-x86_64 ./cmake-${{ matrix.cmake-version }}
          echo "$(pwd)/cmake-${{ matrix.cmake-version }}/bin" >> $GITHUB_PATH

      - name: Prepare Qt folder
        run: |
          mkdir -p "${{ github.workspace }}/deps"

      - name: Install Qt ${{ matrix.qt-version }}
        if: ${{ matrix.vfx-platform == 'CY2023' }}
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ matrix.qt-version }}'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: "${{ github.workspace }}/deps"
          install-deps: 'false'
          modules: ${{ env.QT5_MODULES }}
          archives: ${{ env.ROCKY_QT5_ARCHIVES }}
          # Caching only save 2 minutes. Keep the cache for longer operations.
          cache: false
          setup-python: 'false'
          tools: 'tools_qtcreator'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==3.2.*'
      
      - name: Install Qt ${{ matrix.qt-version }}
        if: ${{ matrix.vfx-platform == 'CY2024' }}
        uses: jurplel/install-qt-action@v4
        with:
          version: '${{ matrix.qt-version }}'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          dir: "${{ github.workspace }}/deps"
          install-deps: 'false'
          modules: ${{ env.ROCKY_QT6_MODULES }}
          archives: ${{ env.ROCKY_QT6_ARCHIVES }}
          # Caching only save 2 minutes. Keep the cache for longer operations.
          cache: false
          setup-python: 'false'
          tools: 'tools_qtcreator'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==3.2.*'
        
      - name: Install Python dependencies
        run: |
          python3 -m pip install --user --upgrade -r requirements.txt
          python3 -m pip install --user conan

      # For Rocky Linux, we can't cache the dependencies of Open RV 
      # because there is not enough room in the cache (10GB limit) for all platforms.

      - name: Configure OpenRV
        if: ${{ matrix.vfx-platform == 'CY2023' }}
        run: |
          cmake --version
          export QT_HOME=/__w/OpenRV/OpenRV/deps/Qt/${{ matrix.qt-version}}/gcc_64
          cmake -B _build -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DRV_DEPS_QT5_LOCATION=$QT_HOME -DRV_VFX_PLATFORM=${{ matrix.vfx-platform }}

      - name: Configure OpenRV
        if: ${{ matrix.vfx-platform == 'CY2024' }}
        run: |
          ls -al /github/home/.local/bin/
          /github/home/.local/bin/conan create conan/recipes/ffmpeg/all/conanfile.py --version 6.1.1 --user openrv --build=missing --pr:a ./conan/profiles/x86_64_rocky8
          /github/home/.local/bin/conan export openrvcore-conanfile.py
   
      - name: Build OpenRV dependencies
        run: |
          export QT_HOME=/__w/OpenRV/OpenRV/deps/Qt/${{ matrix.qt-version}}/gcc_64
          /github/home/.local/bin/conan install conanfile.py --build=missing -pr:a ./conan/profiles/x86_64_rocky8

      - name: Build OpenRV main executable
        run: |
          export QT_HOME=/__w/OpenRV/OpenRV/deps/Qt/${{ matrix.qt-version}}/gcc_64
          /github/home/.local/bin/conan build conanfile.py --build=missing -pr:a ./conan/profiles/x86_64_rocky8

      - name: Tests
        run: |
          ctest --test-dir build/Release -C ${{ matrix.build-type }} --extra-verbose

      - name: Free some spaces for the install steps
        run: |
          rm -rf build/Release/RV_DEPS_*
          rm -rf build/Release/_deps

      - name: Install OpenRV
        run: |
          cmake --install build/Release --prefix $(pwd)/_install --config ${{ matrix.build-type }}
