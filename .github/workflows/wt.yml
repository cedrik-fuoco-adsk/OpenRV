name: Test fetch images

on:
  push:

  workflow_dispatch:
  
env:
  IMAGE: ghcr.io/cedrik-fuoco-adsk/openrv-buildpack-windows

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: List GitHub Package Images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.actor }}
        run: |
          echo "# GitHub Package Images Report" >> $GITHUB_STEP_SUMMARY
          echo "Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "Generated: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY


          # Function to convert bytes to human readable format
          convert_bytes() {
            local bytes=$1
            if [ $bytes -eq 0 ]; then
              echo "0 B"
            elif [ $bytes -lt 1024 ]; then
              echo "${bytes} B"
            elif [ $bytes -lt 1048576 ]; then
              echo "$(( bytes / 1024 )) KB"
            elif [ $bytes -lt 1073741824 ]; then
              echo "$(( bytes / 1048576 )) MB"
            else
              echo "$(( bytes / 1073741824 )) GB"
            fi
          }
          
          # Get all packages for the repository owner
          echo "Fetching packages for owner: $OWNER"
          packages=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/$OWNER/packages?package_type=container&per_page=100")
          
          if [ "$(echo "$packages" | jq '. | length')" -eq 0 ]; then
            echo "No container packages found for $OWNER"
            echo "## No Packages Found" >> $GITHUB_STEP_SUMMARY
            echo "No container packages were found for this repository owner." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "## Container Images" >> $GITHUB_STEP_SUMMARY
          echo "| Package Name | Version/Tag | Size | Created | Downloads |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|-------------|------|---------|-----------|" >> $GITHUB_STEP_SUMMARY
          
          total_size=0
          package_count=0
          
          # Process each package
          echo "$packages" | jq -r '.[].name' | while read -r package_name; do
            echo "Processing package: $package_name"
            
            # Get package versions
            versions=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/users/$OWNER/packages/container/$package_name/versions?per_page=50")
            
            # Process each version
            echo "$versions" | jq -r '.[] | @base64' | while IFS= read -r version_data; do
              version_json=$(echo "$version_data" | base64 -d)
              
              version_id=$(echo "$version_json" | jq -r '.id')
              version_name=$(echo "$version_json" | jq -r '.name // "latest"')
              created_at=$(echo "$version_json" | jq -r '.created_at')
              download_count=$(echo "$version_json" | jq -r '.metadata.container.tags | length // 0')
              
              # Get detailed version info including size
              version_details=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/users/$OWNER/packages/container/$package_name/versions/$version_id")
              
              # Extract size from metadata
              size_bytes=$(echo "$version_details" | jq -r '.metadata.container.size // 0')
              
              if [ "$size_bytes" != "null" ] && [ "$size_bytes" != "0" ]; then
                size_human=$(convert_bytes $size_bytes)
              else
                size_human="Unknown"
              fi
              
              # Format created date
              created_date=$(date -d "$created_at" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "Unknown")
              
              # Get tags for this version
              tags=$(echo "$version_details" | jq -r '.metadata.container.tags[]?' 2>/dev/null | tr '\n' ', ' | sed 's/,$//')
              if [ -z "$tags" ]; then
                tags="$version_name"
              fi
              
              echo "| $package_name | $tags | $size_human | $created_date | $download_count |" >> $GITHUB_STEP_SUMMARY
              
              if [ "$size_bytes" != "null" ] && [ "$size_bytes" -gt 0 ]; then
                total_size=$((total_size + size_bytes))
              fi
              package_count=$((package_count + 1))
            done
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total packages/versions: $package_count" >> $GITHUB_STEP_SUMMARY
          echo "- Total estimated size: $(convert_bytes $total_size)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Note: Sizes are approximate and may not include all layers or metadata.*" >> $GITHUB_STEP_SUMMARY
