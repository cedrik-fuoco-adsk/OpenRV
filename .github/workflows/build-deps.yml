name: Build Windows dependencies

on:
  push:
  
  pull_request: # This handles PR creation and subsequent commits.

  schedule:
    # Midnight build every day
    - cron: "0 0 * * *"

  # This allows manual triggering of the workflow from the web
  workflow_dispatch:
    inputs:
      SKIP_DEPS_CACHE:
        description: 'Skip dependencies caching'
        required: true
        default: 'false'

env:
  SKIP_DEPS_CACHE: 'false'
  QT5_MODULES: 'debug_info qtcharts qtdatavis3d qtlottie qtnetworkauth qtquick3d qtquicktimeline qtscript qtwebengine qtwebglplugin'
  ROCKY_QT5_ARCHIVES: 'icu qt3d qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwayland qtwebchannel qtwebsockets qtwebview qtx11extras qtxmlpatterns'
  MACOX_X86_64_QT5_ARCHIVES: 'd3dcompiler_47 opengl32sw qt3d qtactiveqt qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwebchannel qtwebsockets qtwebview qtwinextras qtxmlpatterns'
  WINDOWS_QT5_ARCHIVES: 'd3dcompiler_47 opengl32sw qt3d qtactiveqt qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwebchannel qtwebsockets qtwebview qtwinextras qtxmlpatterns'

  ROCKY_QT6_MODULES: 'debug_info qt3d qt5compat qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwaylandcompositor qtwebchannel qtwebengine qtwebsockets qtwebview'
  ROCKY_QT6_ARCHIVES: 'icu qtbase qtdeclarative qtsvg qttools qttranslations qtwayland'
  MACOX_X86_64_QT6_MODULES: 'debug_info qt3d qt5compat qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwebchannel qtwebengine qtwebsockets qtwebview'
  MACOX_X86_64_QT6_ARCHIVES: 'qtbase qtdeclarative qtsvg qttools qttranslations'
  WINDOWS_QT6_MODULES: 'debug_info qt3d qt5compat qtactiveqt qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwebchannel qtwebengine qtwebsockets qtwebview'
  WINDOWS_QT6_ARCHIVES: 'd3dcompiler_47 opengl32sw qtbase qtdeclarative qtsvg qttools qttranslations'

jobs:
  windows:
    if : ${{ github.repository_owner == 'cedrik-fuoco-adsk' }}
    name: 'Windows ${{ matrix.vfx-platform }}
      <${{ matrix.os }}
       msvc=${{ matrix.msvc-component }},
       qt=${{ matrix.qt-version }},
       python=${{ matrix.python-version }},
       cmake=${{ matrix.cmake-version }},
       arch=${{ matrix.arch-type }},
       config=${{ matrix.build-type }}>'

    strategy:
      fail-fast: false
      matrix:
        include:
          # VFX2024
          - os: "windows-2025"
            arch-type: "x86_64"
            build-type: "Release"
            qt-version: "6.5.3"
            python-version: "3.11"
            cmake-version: "3.31.6"
            vfx-platform: "CY2024"
            msvc-component: "14.40.17.10.x86.x64"
            msvc-compiler: "14.40.33807"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # 4.1.7
        with:
          submodules: recursive
          
      - name: Install MSVC components ${{ matrix.msvc-component }}
        run: |
          # Kill any existing VS installer processes
          Get-Process -Name "vs_installer*" -ErrorAction SilentlyContinue | Stop-Process -Force
          Get-Process -Name "setup*" -ErrorAction SilentlyContinue | Stop-Process -Force
          
          # Wait a moment for processes to fully terminate
          Start-Sleep -Seconds 5
          
          Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
          $componentsToAdd = @(
            "Microsoft.VisualStudio.Component.VC.${{ matrix.msvc-component }}"
            "Microsoft.VisualStudio.Component.VC.1${{ matrix.msvc-component }}.Spectre"
          )
          
          # Build arguments properly as array
          $Arguments = @(
            'modify'
            '--installPath'
            $InstallPath
            '--quiet'
            '--norestart'
            '--nocache'
            '--wait'
          )
          
          # Add components to arguments
          foreach ($component in $componentsToAdd) {
            $Arguments += '--add'
            $Arguments += $component
          }
          
          Write-Host "Running VS Installer with arguments: $($Arguments -join ' ')"
          
          # Function to run installer with timeout
          function Invoke-VSInstaller {
            param($Arguments, $TimeoutMinutes = 30)
            
            try {
              $process = Start-Process -FilePath ".\vs_installer.exe" -ArgumentList $Arguments -Wait -PassThru -NoNewWindow -RedirectStandardOutput "vs_output.log" -RedirectStandardError "vs_error.log"
              
              # Check if process is still running after expected completion
              if ($process.HasExited) {
                Write-Host "VS Installer completed with exit code: $($process.ExitCode)"
                
                # Show output logs for debugging
                if (Test-Path "vs_output.log") {
                  Write-Host "=== VS Installer Output ==="
                  Get-Content "vs_output.log"
                }
                if (Test-Path "vs_error.log") {
                  Write-Host "=== VS Installer Errors ==="
                  Get-Content "vs_error.log"
                }
                
                return $process.ExitCode
              } else {
                Write-Warning "VS Installer process did not exit properly"
                return -1
              }
            } catch {
              Write-Error "Failed to start VS Installer: $($_.Exception.Message)"
              return -1
            }
          }
          
          # First attempt
          Write-Host "First installation attempt..."
          $exitCode1 = Invoke-VSInstaller -Arguments $Arguments
          
          if ($exitCode1 -eq 0) {
            Write-Host "First attempt successful"
          } else {
            Write-Warning "First attempt failed with exit code: $exitCode1"
            
            # Wait and kill any hanging processes
            Start-Sleep -Seconds 10
            Get-Process -Name "vs_installer*" -ErrorAction SilentlyContinue | Stop-Process -Force
            Get-Process -Name "setup*" -ErrorAction SilentlyContinue | Stop-Process -Force
            Start-Sleep -Seconds 5
            
            # Second attempt
            Write-Host "Second installation attempt..."
            $exitCode2 = Invoke-VSInstaller -Arguments $Arguments
            
            if ($exitCode2 -ne 0) {
              Write-Error "Both installation attempts failed. Exit codes: $exitCode1, $exitCode2"
              
              # Show system information for debugging
              Write-Host "=== System Information ==="
              Get-WmiObject -Class Win32_OperatingSystem | Select-Object Caption, Version, FreePhysicalMemory, TotalVisibleMemorySize
              Get-Process | Where-Object {$_.ProcessName -like "*visual*" -or $_.ProcessName -like "*msbuild*"} | Select-Object ProcessName, Id, CPU, WorkingSet
              
              exit 1
            } else {
              Write-Host "Second attempt successful"
            }
          }
          
          Write-Host "MSVC components installation completed successfully"
        shell: powershell
        timeout-minutes: 20
          
      - name: Set up MSVC ${{ matrix.msvc-compiler }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: ${{ matrix.msvc-compiler }}
          arch: '${{ matrix.arch-type }}'

      - name: Activate Python ${{ matrix.python-version }}
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # 5.2.0
        with:
          python-version: '${{ matrix.python-version }}'

      - name: Display Python installation location
        run: |
          python -c "import sys; print(sys.executable)"

      - name: Cache CMake for Windows
        uses: actions/cache@v4
        id: windows-cmake-cache
        with:
          path: "C:/Program Files/CMake"
          key: ${{ runner.os }}-cmake-${{ matrix.cmake-version }}

      - name: Install CMake ${{ matrix.cmake-version }} with chocolatey
        if: steps.windows-cmake-cache.outputs.cache-hit != 'true'
        run: |
          choco install cmake --version=${{ matrix.cmake-version }} --allow-downgrade
