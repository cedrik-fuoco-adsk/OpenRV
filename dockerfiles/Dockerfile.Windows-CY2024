# escape=`
FROM mcr.microsoft.com/windows/servercore:ltsc2022

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Set environment variables
ENV CMAKE_VERSION=3.31.6 `
    PYTHON_VERSION_2023=3.10.11 `
    PYTHON_VERSION_2024=3.11.9 `
    QT_VERSION_2023=5.15.2 `
    QT_VERSION_2024=6.5.3 `
    MSVC_COMPONENT=14.40.17.10.x86.x64 `
    MSVC_COMPILER=14.40.33807

# Install Chocolatey
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; `
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

# Install Git via Chocolatey 
RUN choco install git -y; `
    choco install 7zip -y; `
    choco install wget -y

# Install Visual Studio Build Tools 2022 with specific MSVC components
RUN choco install visualstudio2022buildtools -y; `
    choco install visualstudio2022-workload-vctools -y

# Install specific MSVC components
RUN & 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe' modify `
    --installPath 'C:\Program Files\Microsoft Visual Studio\2022\BuildTools' `
    --add Microsoft.VisualStudio.Component.VC.$env:MSVC_COMPONENT `
    --add Microsoft.VisualStudio.Component.VC.1$env:MSVC_COMPONENT.Spectre `
    --quiet --wait; `
    if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

# Install Python 3.10 for VFX 2023 (default)
RUN $url = 'https://www.python.org/ftp/python/3.10.11/python-3.10.11-amd64.exe'; `
    Invoke-WebRequest -Uri $url -OutFile 'python-installer.exe'; `
    Start-Process -FilePath 'python-installer.exe' -ArgumentList '/quiet', 'InstallAllUsers=1', 'PrependPath=1', 'TargetDir=C:\Python310' -Wait; `
    Remove-Item 'python-installer.exe'

# Create python3.exe alias
RUN Copy-Item 'C:\Python310\python.exe' 'C:\Python310\python3.exe'

# Install CMake via Chocolatey
RUN choco install cmake --version=$env:CMAKE_VERSION --allow-downgrade -y

# Install Strawberry Perl (required for OpenRV dependencies)
RUN choco install strawberryperl -y

# Download and install MSYS2
RUN Write-Host "Starting MSYS2 installation..."; `
    $msys2Installer = "msys2-x86_64-20230526.exe"; `
    $url = "https://github.com/msys2/msys2-installer/releases/download/2023-05-26/$msys2Installer"; `
    Write-Host "Downloading MSYS2 from $url"; `
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; `
    Invoke-WebRequest -Uri $url -OutFile $msys2Installer -UseBasicParsing; `
    Write-Host "Download completed. Starting installation..."; `
    $installArgs = @( `
        'in', `
        '--confirm-command', `
        '--accept-messages', `
        '--root', 'C:\msys64' `
    ); `
    $process = Start-Process -FilePath $msys2Installer -ArgumentList $installArgs -Wait -PassThru -NoNewWindow; `
    if ($process.ExitCode -ne 0) { `
        Write-Error "MSYS2 installation failed with exit code $($process.ExitCode)"; `
        exit 1; `
    }; `
    Remove-Item $msys2Installer -Force; `
    Write-Host "MSYS2 installation completed successfully."

# Add MSYS2 to PATH and verify installation
RUN Write-Host "Current PATH: $env:PATH"; `
    $msys2Path = "C:\msys64"; `
    Write-Host "Checking if MSYS2 directory exists at $msys2Path"; `
    if (-not (Test-Path $msys2Path)) { `
        Write-Error "MSYS2 directory not found at $msys2Path"; `
        exit 1; `
    }; `
    $newPath = "$msys2Path\usr\bin;$msys2Path\mingw64\bin;$env:PATH"; `
    Write-Host "Setting new PATH: $newPath"; `
    $env:PATH = $newPath; `
    [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine); `
    Write-Host "Verifying MSYS2 installation..."; `
    $bashPath = Join-Path $msys2Path "usr\bin\bash.exe"; `
    if (Test-Path $bashPath) { `
        Write-Host "MSYS2 bash found at $bashPath"; `
    } else { `
        Write-Error "MSYS2 bash not found at $bashPath!"; `
        exit 1; `
    }

# Update MSYS2 and install required packages
RUN Write-Host "Updating MSYS2..."; `
    $msys2Path = "C:\msys64"; `
    $bashExe = Join-Path $msys2Path "usr\bin\bash.exe"; `
    Write-Host "Using bash at: $bashExe"; `
    $updateCmd = 'pacman -Syu --noconfirm'; `
    Write-Host "Running update command: $updateCmd"; `
    $process = Start-Process -FilePath $bashExe -ArgumentList '-l', '-c', $updateCmd -Wait -PassThru -NoNewWindow; `
    if ($process.ExitCode -ne 0) { `
        Write-Error "MSYS2 update failed with exit code $($process.ExitCode)"; `
        exit 1; `
    }; `
    Write-Host "Installing MSYS2 packages..."; `
    $packages = @( `
        'mingw-w64-x86_64-autotools', `
        'mingw-w64-x86_64-cmake', `
        'mingw-w64-x86_64-cmake-cmcldeps', `
        'mingw-w64-x86_64-glew', `
        'mingw-w64-x86_64-libarchive', `
        'mingw-w64-x86_64-make', `
        'mingw-w64-x86_64-meson', `
        'mingw-w64-x86_64-toolchain', `
        'autoconf', `
        'automake', `
        'bison', `
        'flex', `
        'git', `
        'libtool', `
        'nasm', `
        'p7zip', `
        'patch', `
        'unzip', `
        'zip' `
    ); `
    $installCmd = "pacman -S --noconfirm $($packages -join ' ')"; `
    Write-Host "Running install command: $installCmd"; `
    $process = Start-Process -FilePath $bashExe -ArgumentList '-l', '-c', $installCmd -Wait -PassThru -NoNewWindow; `
    if ($process.ExitCode -ne 0) { `
        Write-Error "Package installation failed with exit code $($process.ExitCode)"; `
        exit 1; `
    }; `
    Write-Host "MSYS2 packages installed successfully."

# Install aqt (Qt installer tool) via pip
RUN & 'C:\Python310\python.exe' -m pip install --upgrade pip; `
    & 'C:\Python310\python.exe' -m pip install aqt==3.2.*

# Install Qt 5.15.2 for VFX 2023 (default)
RUN New-Item -ItemType Directory -Force -Path 'C:\Qt'; `
    & 'C:\Python310\python.exe' -m aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 `
    --outputdir C:\Qt `
    --modules qtcharts qtdatavis3d qtlottie qtnetworkauth qtquick3d qtquicktimeline qtscript qtwebengine qtwebglplugin `
    --archives d3dcompiler_47 opengl32sw qt3d qtactiveqt qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwebchannel qtwebsockets qtwebview qtwinextras qtxmlpatterns

# Set up environment variables
ENV PATH="C:\Program Files\CMake\bin;C:\Python310;C:\Python310\Scripts;C:\msys64\mingw64\bin;C:\Strawberry\c\bin;C:\Strawberry\perl\site\bin;C:\Strawberry\perl\bin;C:\Program Files\Git\bin;${PATH}" `
    QT_HOME="C:\Qt\5.15.2\msvc2019_64" `
    ACLOCAL_PATH="C:\msys64\usr\share\aclocal" `
    RV_VFX_PLATFORM="CY2023"

# Create a script to set up MSVC environment
RUN $script = '@echo off' + [Environment]::NewLine + `
    'call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"' + [Environment]::NewLine + `
    'cmd /k'; `
    $script | Out-File -FilePath 'C:\setup_msvc.bat' -Encoding ASCII

# Create workspace directory
RUN New-Item -ItemType Directory -Force -Path 'C:\workspace'
WORKDIR C:\workspace

# Copy requirements.txt and install Python dependencies
COPY requirements.txt .
RUN & 'C:\Python310\python.exe' -m pip install --user --upgrade -r requirements.txt

# Create a build script for OpenRV
RUN $buildScript = '@echo off' + [Environment]::NewLine + `
    'echo Setting up MSVC environment...' + [Environment]::NewLine + `
    'call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"' + [Environment]::NewLine + `
    '' + [Environment]::NewLine + `
    'echo Configuring OpenRV...' + [Environment]::NewLine + `
    'if "%RV_VFX_PLATFORM%"=="CY2023" (' + [Environment]::NewLine + `
    '    cmake -B _build -G "Visual Studio 17 2022" -A x64 ^' + [Environment]::NewLine + `
    '        -DRV_DEPS_WIN_PERL_ROOT=C:\Strawberry\perl\bin ^' + [Environment]::NewLine + `
    '        -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^' + [Environment]::NewLine + `
    '        -DRV_DEPS_QT5_LOCATION=%QT_HOME% ^' + [Environment]::NewLine + `
    '        -DRV_VFX_PLATFORM=%RV_VFX_PLATFORM%' + [Environment]::NewLine + `
    ') else (' + [Environment]::NewLine + `
    '    cmake -B _build -G "Visual Studio 17 2022" -A x64 ^' + [Environment]::NewLine + `
    '        -DRV_DEPS_WIN_PERL_ROOT=C:\Strawberry\perl\bin ^' + [Environment]::NewLine + `
    '        -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^' + [Environment]::NewLine + `
    '        -DRV_DEPS_QT6_LOCATION=%QT_HOME% ^' + [Environment]::NewLine + `
    '        -DRV_VFX_PLATFORM=%RV_VFX_PLATFORM%' + [Environment]::NewLine + `
    ')' + [Environment]::NewLine + `
    '' + [Environment]::NewLine + `
    'echo Building OpenRV dependencies...' + [Environment]::NewLine + `
    'cmake --build _build --config %BUILD_TYPE% --target dependencies --parallel %NUMBER_OF_PROCESSORS% -v' + [Environment]::NewLine + `
    '' + [Environment]::NewLine + `
    'echo Building OpenRV main executable...' + [Environment]::NewLine + `
    'cmake --build _build --config %BUILD_TYPE% --target main_executable --parallel %NUMBER_OF_PROCESSORS% -v' + [Environment]::NewLine + `
    '' + [Environment]::NewLine + `
    'echo Running tests...' + [Environment]::NewLine + `
    'ctest --test-dir _build -C %BUILD_TYPE% --extra-verbose' + [Environment]::NewLine + `
    '' + [Environment]::NewLine + `
    'echo Installing OpenRV...' + [Environment]::NewLine + `
    'cmake --install _build --prefix %cd%\_install --config %BUILD_TYPE%'; `
    $buildScript | Out-File -FilePath 'C:\build_openrv.bat' -Encoding ASCII

# Set default build type
ENV BUILD_TYPE=Release

# Create alternative configurations for different VFX platforms and Qt versions
RUN $setupQt6Script = '@echo off' + [Environment]::NewLine + `
    'echo Installing Qt 6.5.3 for VFX 2024...' + [Environment]::NewLine + `
    'C:\Python310\python.exe -m aqt install-qt windows desktop 6.5.3 win64_msvc2019_64 --outputdir C:\Qt --modules qt3d qt5compat qtactiveqt qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwebchannel qtwebengine qtwebsockets qtwebview --archives d3dcompiler_47 opengl32sw qtbase qtdeclarative qtsvg qttools qttranslations' + [Environment]::NewLine + `
    '' + [Environment]::NewLine + `
    'set QT_HOME=C:\Qt\6.5.3\msvc2019_64' + [Environment]::NewLine + `
    'set RV_VFX_PLATFORM=CY2024' + [Environment]::NewLine + `
    'echo Qt 6.5.3 installed and environment updated for VFX 2024'; `
    $setupQt6Script | Out-File -FilePath 'C:\setup_qt6_vfx2024.bat' -Encoding ASCII

RUN $setupPython311Script = '@echo off' + [Environment]::NewLine + `
    'echo Installing Python 3.11 for VFX 2024...' + [Environment]::NewLine + `
    'powershell -Command "Invoke-WebRequest -Uri ''https://www.python.org/ftp/python/3.11.9/python-3.11.9-amd64.exe'' -OutFile ''python311-installer.exe''"' + [Environment]::NewLine + `
    'python311-installer.exe /quiet InstallAllUsers=1 PrependPath=0 TargetDir=C:\Python311' + [Environment]::NewLine + `
    'del python311-installer.exe' + [Environment]::NewLine + `
    'copy C:\Python311\python.exe C:\Python311\python3.exe' + [Environment]::NewLine + `
    'echo Python 3.11 installed'; `
    $setupPython311Script | Out-File -FilePath 'C:\setup_python311.bat' -Encoding ASCII

# Create entry point script
RUN $entryScript = '@echo off' + [Environment]::NewLine + `
    'echo OpenRV Windows Build Container' + [Environment]::NewLine + `
    'echo =============================' + [Environment]::NewLine + `
    'echo.' + [Environment]::NewLine + `
    'echo Available commands:' + [Environment]::NewLine + `
    'echo   build_openrv.bat         - Build OpenRV with current configuration' + [Environment]::NewLine + `
    'echo   setup_qt6_vfx2024.bat    - Switch to Qt 6.5.3 and VFX Platform 2024' + [Environment]::NewLine + `
    'echo   setup_python311.bat      - Install Python 3.11 for VFX 2024' + [Environment]::NewLine + `
    'echo   setup_msvc.bat           - Set up MSVC environment and open command prompt' + [Environment]::NewLine + `
    'echo.' + [Environment]::NewLine + `
    'echo Current configuration:' + [Environment]::NewLine + `
    'echo   VFX Platform: %RV_VFX_PLATFORM%' + [Environment]::NewLine + `
    'echo   Qt Home: %QT_HOME%' + [Environment]::NewLine + `
    'echo   Build Type: %BUILD_TYPE%' + [Environment]::NewLine + `
    'echo   Python: C:\Python310\python.exe' + [Environment]::NewLine + `
    'echo.' + [Environment]::NewLine + `
    'echo To build OpenRV:' + [Environment]::NewLine + `
    'echo   1. Clone your OpenRV repository to C:\workspace' + [Environment]::NewLine + `
    'echo   2. Run: build_openrv.bat' + [Environment]::NewLine + `
    'echo.' + [Environment]::NewLine + `
    'cmd /k'; `
    $entryScript | Out-File -FilePath 'C:\entrypoint.bat' -Encoding ASCII

# Set the entry point
ENTRYPOINT ["C:\\entrypoint.bat"] 
