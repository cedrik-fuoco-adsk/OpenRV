# escape=`
FROM mcr.microsoft.com/windows/servercore:ltsc2022

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Set environment variables
ENV CMAKE_VERSION=3.31.6 `
    PYTHON_VERSION_2023=3.10.11 `
    PYTHON_VERSION_2024=3.11.9 `
    QT_VERSION_2023=5.15.2 `
    QT_VERSION_2024=6.5.3 `
    MSVC_COMPONENT=14.40.17.10.x86.x64 `
    MSVC_COMPILER=14.40.33807

# Install Chocolatey
RUN Set-ExecutionPolicy Bypass -Scope Process -Force; `
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

# Install Git via Chocolatey 
#RUN choco install git -y; `
#    choco install 7zip -y; `
#    choco install wget -y

# Install Visual Studio Build Tools 2022 with specific MSVC components
RUN choco install visualstudio2022buildtools -y; `
    choco install visualstudio2022-workload-vctools -y
#RUN choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional"; `
#    choco install windows-sdk-10.0 --version=10.0.22621.0; `
#    choco install visualcpp-build-tools -y

# Install specific MSVC components
RUN & 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe' modify `
    --installPath 'C:\Program Files\Microsoft Visual Studio\2022\BuildTools' `
    --add Microsoft.VisualStudio.Component.VC.$env:MSVC_COMPONENT `
    --add Microsoft.VisualStudio.Component.VC.1$env:MSVC_COMPONENT.Spectre `
    --quiet --wait; `
    if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

RUN $vsPath = & 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe' -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath; `
    Write-Host "Visual Studio Path: $vsPath"; `
    ls -R $vsPath\VC\Auxiliary\Build; `
    & "$vsPath\VC\Auxiliary\Build\vcvars64.bat"

# Install Python 3.11 for VFX 2024
RUN $url = 'https://www.python.org/ftp/python/3.11.9/python-3.11.9-amd64.exe'; `
    Invoke-WebRequest -Uri $url -OutFile 'python-installer.exe'; `
    Start-Process -FilePath 'python-installer.exe' -ArgumentList '/quiet', 'InstallAllUsers=1', 'PrependPath=1', 'TargetDir=C:\Python311' -Wait; `
    Remove-Item 'python-installer.exe'

# Create python3.exe alias
RUN Copy-Item 'C:\Python311\python.exe' 'C:\Python311\python3.exe'

# Install CMake via Chocolatey
RUN choco install cmake --version=$env:CMAKE_VERSION --allow-downgrade -y

# Install Strawberry Perl (required for OpenRV dependencies)
RUN choco install strawberryperl -y

# Download and install MSYS2
RUN $url = 'https://github.com/msys2/msys2-installer/releases/download/2025-02-21/msys2-x86_64-20250221.exe'; `
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; `
    Invoke-WebRequest -Uri $url -OutFile 'msys2-installer.exe' -UseBasicParsing; `
    Start-Process -FilePath 'msys2-installer.exe' -ArgumentList 'in', '--confirm-command', '--accept-messages', '--root', 'C:\msys64' -Wait; `
    Remove-Item 'msys2-installer.exe' -Force

# Add MSYS2 to PATH and verify installation
RUN Write-Host "Current PATH: $env:PATH"; `
    $msys2Path = 'C:\msys64'; `
    Write-Host "Checking if MSYS2 directory exists at $msys2Path"; `
    if (-not (Test-Path $msys2Path)) { `
        Write-Error "MSYS2 directory not found at $msys2Path"; `
        exit 1; `
    }; `
    $newPath = $msys2Path + '\usr\bin;' + $msys2Path + '\mingw64\bin;' + $env:PATH; `
    Write-Host "Setting new PATH: $newPath"; `
    $env:PATH = $newPath; `
    [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine); `
    Write-Host "Verifying MSYS2 installation..."; `
    $bashPath = Join-Path $msys2Path 'usr\bin\bash.exe'; `
    if (Test-Path $bashPath) { `
        Write-Host "MSYS2 bash found at $bashPath"; `
    } else { `
        Write-Error "MSYS2 bash not found at $bashPath!"; `
        exit 1; `
    }

# Install MSYS2 and update core packages
RUN $msys2Path = 'C:\msys64'; `
    $bashExe = Join-Path $msys2Path 'usr\bin\bash.exe'; `
    Write-Host "Running core MSYS2 update..."; `
    & $bashExe '-lc', 'pacman -Syu --noconfirm'; `
    if ($LASTEXITCODE -ne 0) { throw 'Core update failed with exit code: ' + $LASTEXITCODE }

# Second layer: re-run install with a fresh shell
RUN $msys2Path = 'C:\msys64'; `
    $bashExe = Join-Path $msys2Path 'usr\bin\bash.exe'; `
    Write-Host "Installing MSYS2 packages"; `
    & $bashExe '-lc', 'pacman -Sy --needed --noconfirm mingw-w64-x86_64-cmake mingw-w64-x86_64-cmake-cmcldeps mingw-w64-x86_64-glew mingw-w64-x86_64-libarchive mingw-w64-x86_64-make mingw-w64-x86_64-meson mingw-w64-x86_64-toolchain autoconf automake bison flex git libtool nasm p7zip patch unzip zip'; `
    if ($LASTEXITCODE -ne 0) { throw 'Package install failed with exit code: ' + $LASTEXITCODE }; `
    Write-Host 'MSYS2 packages installed successfully.'

# Install aqt (Qt installer tool) via pip
RUN & 'C:\Python311\python.exe' -m pip install --upgrade pip; `
    & 'C:\Python311\python.exe' -m pip install aqtinstall

# Install Qt 6.5.3 for VFX 2024
RUN New-Item -ItemType Directory -Force -Path 'C:\Qt'; `
    & 'C:\Python311\python.exe' -m aqt install-qt windows desktop 6.5.3 win64_msvc2019_64 `
    --outputdir C:\Qt `
    --modules qt3d qt5compat qtactiveqt qtcharts qtconnectivity qtdatavis3d qtgrpc qthttpserver qtimageformats qtlanguageserver qtlocation qtlottie qtmultimedia qtnetworkauth qtpdf qtpositioning qtquick3d qtquick3dphysics qtquickeffectmaker qtquicktimeline qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtshadertools qtspeech qtvirtualkeyboard qtwebchannel qtwebengine qtwebsockets qtwebview `
    --archives d3dcompiler_47 opengl32sw qtbase qtdeclarative qtsvg qttools qttranslations

# Set up environment variables
ENV PATH="C:\Program Files\CMake\bin;C:\Python311;C:\Python311\Scripts;C:\msys64\mingw64\bin;C:\Strawberry\c\bin;C:\Strawberry\perl\site\bin;C:\Strawberry\perl\bin;C:\Program Files\Git\bin;${PATH}" `
    QT_HOME="C:\Qt\6.5.3\msvc2019_64" `
    ACLOCAL_PATH="C:\msys64\usr\share\aclocal" `
    RV_VFX_PLATFORM="CY2024"

# Create workspace directory
RUN New-Item -ItemType Directory -Force -Path 'C:\workspace'
WORKDIR C:\w

# Copy requirements.txt and install Python dependencies
COPY requirements.txt .
RUN & 'C:\Python311\python.exe' -m pip install --user --upgrade -r requirements.txt

